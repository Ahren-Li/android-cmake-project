SET(LOAD_MODULE_DEBUG OFF)
SET(MK_OUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/AndroidMK")
SET(MK_DEP_DIR "${MK_OUT_DIR}/dep")
SET(MK_EXP_DIR "${MK_OUT_DIR}/export")
SET(MK_NEED_EXP_DIR "${MK_OUT_DIR}/need_export")

function(paresPath in out)
    string(REGEX REPLACE " +|\"|\\[|\\]" "" paresPath_tmp ${in})
    string(REGEX REPLACE ":{.*" "" paresPath_name ${paresPath_tmp})
    string(REGEX REPLACE ".*path:" "" paresPath_tmp ${paresPath_tmp})
    string(REGEX REPLACE ",.*" "" paresPath_path ${paresPath_tmp})
    if(LOAD_MODULE_DEBUG)
        message("paresPath: name = ${name}")
        message("paresPath: path = ${path}")
    endif()
    SET(${out} "${paresPath_name}:${paresPath_path}\n" PARENT_SCOPE)
endfunction()

function(getModulePath type module out)
    SET(getModulePath_module_path "")
    string(REPLACE "+" "\\+" module "${module}")
    file(STRINGS ${MK_OUT_DIR}/${type}.module getModulePath_module_paths REGEX "^${module}:.*")
    foreach(getModulePath_path ${getModulePath_module_paths})
        if(LOAD_MODULE_DEBUG)
            message("getModlePath: ${type} = ${getModulePath_path}")
        endif()
        string(REPLACE ":" ";" getModulePath_path ${getModulePath_path})
        LIST(GET getModulePath_path 1 getModulePath_path)
        SET(getModulePath_module_path ${getModulePath_path})
    endforeach()
    SET(${out} "${getModulePath_module_path}" PARENT_SCOPE)
endfunction()

function(containsModule name out)
    SET(${out} OFF PARENT_SCOPE)
    if(EXISTS ${MK_OUT_DIR}/module.list)
        string(REPLACE "+" "\\+" name "${name}")
        file(STRINGS ${MK_OUT_DIR}/module.list containsModule_module_list REGEX "^${name}:")
        foreach(containsModule_module_path ${containsModule_module_list})
            # TODO
            SET(${out} ON PARENT_SCOPE)
        endforeach()
    endif()
endfunction()

function(containsDependencies module type name out)
    SET(${out} OFF PARENT_SCOPE)
    if(EXISTS ${MK_DEP_DIR}/${module}.dep)
        string(REPLACE "+" "\\+" name "${name}")
        file(STRINGS ${MK_DEP_DIR}/${module}.dep containsDependencies_list REGEX "^${name}:${type}")
        foreach(containsDependencies ${containsDependencies_list})
            # TODO
            SET(${out} ON PARENT_SCOPE)
        endforeach()
    endif()
endfunction()

function(containsNeedExport module_name module_type libName type out)
    SET(${out} OFF PARENT_SCOPE)
    if(EXISTS "${MK_NEED_EXP_DIR}/${libName}_${type}.list")
        file(STRINGS "${MK_NEED_EXP_DIR}/${libName}_${type}.list" containsNeedExport_list REGEX "^${module_name}:${module_type}")
        if(NOT "${containsNeedExport_list}" STREQUAL "")
            SET(${out} ON PARENT_SCOPE)
        endif()
    endif()
endfunction()

function(getModuleDependencies module out)
    SET(${out} "" PARENT_SCOPE)
    if(EXISTS ${MK_DEP_DIR}/${module}.dep)
        file(STRINGS ${MK_DEP_DIR}/${module}.dep getModuleDependencies_list)
        set(${out} "${getModuleDependencies_list}" PARENT_SCOPE)
    endif()
endfunction()

function(doModuleDependencies module)
    getModuleDependencies("${module}" doModuleDependencies_list)
    foreach(doModuleDependencies_module ${doModuleDependencies_list})
        string(REPLACE ":" ";" doModuleDependencies_module "${doModuleDependencies_module}")
        LIST(GET doModuleDependencies_module 0 doModuleDependencies_name)
        LIST(GET doModuleDependencies_module 1 doModuleDependencies_type)
        parseAndroidMK("${doModuleDependencies_name}" "${doModuleDependencies_type}")
    endforeach()
endfunction()

function(getModuleExport module_name type out)
    SET(${out} "" PARENT_SCOPE)
    if(EXISTS "${MK_EXP_DIR}/${module_name}_${type}.export")
        file(STRINGS "${MK_EXP_DIR}/${module_name}_${type}.export" getModuleExport_list)
        SET(${out} "${getModuleExport_list}" PARENT_SCOPE)
    endif()
endfunction()

function(doExportInclude module)
    getModuleDependencies("${module}" doModuleDependencies_list)
    foreach(doModuleDependencies_module ${doModuleDependencies_list})
        string(REPLACE ":" ";" doModuleDependencies_module "${doModuleDependencies_module}")
        LIST(GET doModuleDependencies_module 0 doModuleDependencies_name)
        LIST(GET doModuleDependencies_module 1 doModuleDependencies_type)
        addExportInclude("${module}" "${MK_EXP_DIR}/${doModuleDependencies_name}_${doModuleDependencies_type}.export")
    endforeach()
endfunction()

function(doNeedExport module_type list)
    if(EXISTS "${MK_NEED_EXP_DIR}/${module_type}.list")
        file(STRINGS "${MK_NEED_EXP_DIR}/${module_type}.list" doNeedExport_list)
        foreach(doNeedExport_module ${doNeedExport_list})
            string(REPLACE ":" "_" doNeedExport_module "${doNeedExport_module}")
            foreach(doNeedExport_dir ${list})
                if(LOAD_MODULE_DEBUG)
                    message("doNeedExport ${doNeedExport_module} add include ${doNeedExport_dir}")
                endif()
                saveExportInclude("${doNeedExport_module}" "${doNeedExport_dir}")
            endforeach()
        endforeach()
    endif()
endfunction()

####### save someing #######

function(saveExportInclude module path)
    file(APPEND ${MK_EXP_DIR}/${module}.export "${path}\n")
endfunction()

function(addModuleDependencies module type dependency)
    containsDependencies("${module}" "${type}" "${dependency}" addModuleDependencies_is_add)
    if(NOT addModuleDependencies_is_add)
        file(APPEND ${MK_DEP_DIR}/${module}.dep "${dependency}:${type}\n")
    endif()
endfunction()

function(addModule name path)
    file(APPEND ${MK_OUT_DIR}/module.list "${name}:${path}\n")
endfunction()

function(addNeedExport module module_type libName type)
    containsNeedExport("${module}" "${module_type}" "${libName}" "${type}" isFind)
    if(NOT isFind)
        file(APPEND ${MK_NEED_EXP_DIR}/${libName}_${type}.list "${module}:${module_type}\n")
    endif()
endfunction()

function(loadModule )
    parseInit()
    SET(loadModule_shared_file_path ${MK_OUT_DIR}/${MK_SHARED}.module)
    SET(loadModule_static_file_path ${MK_OUT_DIR}/${MK_STATIC}.module)
    SET(loadModule_execab_file_path ${MK_OUT_DIR}/${MK_EXECAB}.module)

    SET(loadModule_shared_list "")
    SET(loadModule_static_list "")
    SET(loadModule_execab_list "")

    if(NOT EXISTS ${loadModule_shared_file_path})
        set(loadModule_need ON)
    endif()
    if(NOT EXISTS ${loadModule_static_file_path})
        set(loadModule_need ON)
    endif()
    if(NOT EXISTS ${loadModule_execab_file_path})
        set(loadModule_need ON)
    endif()
    if(loadModule_need)
        file(REMOVE ${loadModule_shared_file_path})
        file(REMOVE ${loadModule_static_file_path})
        file(REMOVE ${loadModule_execab_file_path})
    else()
        return()
    endif()

    message("loadModule start ${ANDROID_LUNCH}")
    file(STRINGS ${PROJECT_DIR}/out/target/product/${ANDROID_LUNCH}/module-info.json MyFile REGEX "(SHARED_LIBRARIES|STATIC_LIBRARIES|EXECUTABLES)")
    message("loadModule end")
    foreach(line ${MyFile})
        string(STRIP "${line}" line)
        message(${line})
        paresPath("${line}" loadModule_line)
        if( "${line}" MATCHES ".*STATIC_LIBRARIES.*")
            set(loadModule_static_list "${loadModule_static_list}${loadModule_line}")
        endif()
        if( "${line}" MATCHES ".*SHARED_LIBRARIES.*")
            set(loadModule_shared_list "${loadModule_shared_list}${loadModule_line}")
        endif()
        if( "${line}" MATCHES ".*EXECUTABLES.*")
            set(loadModule_execab_list "${loadModule_execab_list}${loadModule_line}")
        endif()
    endforeach()
    file(WRITE ${loadModule_shared_file_path} "${loadModule_shared_list}")
    file(WRITE ${loadModule_static_file_path} "${loadModule_static_list}")
    file(WRITE ${loadModule_execab_file_path} "${loadModule_execab_list}")
endfunction()

function(parseInit)
    file(REMOVE ${MK_OUT_DIR}/module.list)
    file(REMOVE_RECURSE ${MK_DEP_DIR})
    file(REMOVE_RECURSE ${MK_EXP_DIR})
endfunction()